name: Build and Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CANDIDATE: ghcr.io/${{ github.repository }}/pradtke-hello-world:candidate
  LATEST_TAG_APP: ghcr.io/${{ github.repository }}/pradtke-hello-world:${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: App

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish --configuration Release --no-build --output ./publish

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.CANDIDATE }} .
        docker push ${{ env.CANDIDATE }}
    
  test:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Start container
      run: IMAGE=${{ env.CANDIDATE }} ASPNETCORE_ENVIRONMENT=Test docker compose --profile test up -d

    - name: Run migrations
      run: |
        pushd App
        dotnet tool install dotnet-ef
        dotnet ef database update
        popd

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: integration-tests/package-lock.json
    
    - name: Run integration tests
      run: |
        pushd integration-tests
        npm install
        npx cypress run
        popd

    - name: verify
      if: failure()
      run: docker compose --profile test logs -n 1000

    - name: Upload Cypress artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-artifacts
        path: |
          integration-tests/cypress/screenshots
          integration-tests/cypress/videos

    - name: Tag container as latest    
      if: success()
      run: |
        docker tag $CANDIDATE $LATEST_TAG_APP
        docker push $LATEST_TAG_APP

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'as-pradtke-hello-world'
        images: '${{ env.LATEST_TAG_APP }}'